# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "release" ]
  pull_request:
    branches: [ "release" ]

env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: ticketradar_codedeploy
  CODE_DEPLOY_APPLICATION_NAME: ticketradar
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: ticketradar-deploy-group
  
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Run chmod to make gradlew executable
        run: chmod +x ./gradlew
      # Configure Gradle for optimal use in GiHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
  
      - name: Build with Gradle Wrapper
        run: ./gradlew build -x test -Pprofile=dev
  
      # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
      # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
      #
      # - name: Setup Gradle
      #   uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
      #   with:
      #     gradle-version: '8.5'
      #
      # - name: Build with Gradle 8.5
      #   run: gradle build
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Upload to AWS S3
        run:
          aws deploy push \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --ignore-hidden-files \ 
            --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
            --source .

      # (6) S3버킷에 있는 파일을 대상으로 CodeDeploy실행
      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \\
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \\
            --deployment-config-name CodeDeployDefault.AllAtOnce \\
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \\
            --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip
